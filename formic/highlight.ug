
require:
    common
    parser


morsel = Vector spans ->
    ;; spans == Vector of span
    ;; span == [Integer start, Integer end, Set of attribute]
    ;; attribute == any

    ;; Morsels the sequence of spans so that none of the spans in the
    ;; sequence overlap. Ranges covered by more than one span are
    ;; given the union of the attributes of all the spans covering it.

    ;; Example:
    ;; morsel[[0, 10, {1}], [2, 5, {2}], [4, 7, {3}], [40, 50, {4}]]
    ;; => [[0, 2, {1}], [2, 4, {1, 2}], [4, 5, {1, 2, 3}], [5, 7, {1, 3}],
    ;;     [7, 10, {1}], [10, 40, {}], [40, 50, {4}]]

    jump = [active, bot, top] ->
        e = min (top :: (active each [_, e, _] -> e))
        attributes =
            if empty[active]:
                {}
            elif empty[active.tail]:
                active.head[2]
            else:
                (|) active each [_, _, attr] -> attr
        [e, [bot, e, attributes]]

    jumptill =
        [active, bot, top] when (bot == top) ->
            [nil, active]
        [active, bot, top] ->
            [newbot, span] = jump[active, bot, top]
            newactive = active each x ->
                [_, e, attr] = x
                if[e <= newbot, (false, continue), x]
            [spans, remainder] = jumptill[newactive, newbot, top]
            [span :: spans, remainder]

    process =
        [_, nil _, nil _] ->
            nil
        [start, active, nil _] ->
            top = max active each [_, e, _] -> e
            [spans, _] = jumptill[active, start, top]
            spans
        [start, active, Pair [next, rest]] ->
            [target, end, attr] = next
            [spans, newactive] = jumptill[active, start, target]
            chain[spans, process[target, next :: newactive, rest]]

    spans := sort 
    process[0, nil, iter[spans]]


highlight = [text, spans, offset = 0] ->
    morsel[spans] each [start, end, attributes] ->
        start := max[start - offset, 0]
        end := min[end - offset, text.length]
        #attr[#[*attributes], text[start..end]]

txt = "hello world!"
<> highlight[txt, [[0, txt.length, {}], [2, 5, {"highlight"}]]]


def highlight(text, locations, offset = 0, compound_classes = False):

    locations = morsel(locations)
    results = []
    i = 0
    lt = len(text)

    for start, end, attributes in locations:
        start -= offset
        if start < 0: start = 0
        end -= offset
        if end > lt: end = lt
        if start > end:
            continue
        if i < start:
            results.append(text[i:start])
        a = set()
        if compound_classes:
            for attr in attributes:
                a |= attr
        elif attributes:
            a = attributes[-1]
        results.append((a, text[start:end]))
        i = end

    if i < len(text):
        results.append(text[i:])

    return results







;; spans = [[0, 10, {1}], [2, 5, {2}], [4, 7, {3}], [40, 50, {4}]]

;; <> (morsel spans)


;; <> parse["a + bc - def"]


