
require:
    common


clamp = [spans, Range [bot, top]] ->
    spans each [Range [start, end], attr] ->
        if (end < bot or start > top):
            false, continue
        else:
            [max[start, bot] .. min[end, top], attr]


morsel = [Vector spans] ->
    ;; spans == Vector of span
    ;; span == [Integer start, Integer end, Set of attribute]
    ;; attribute == any

    ;; Morsels the sequence of spans so that none of the spans in the
    ;; sequence overlap. Ranges covered by more than one span are
    ;; given the union of the attributes of all the spans covering it.

    ;; Example:
    ;; morsel[[0, 10, {1}], [2, 5, {2}], [4, 7, {3}], [40, 50, {4}]]
    ;; => [[0, 2, {1}], [2, 4, {1, 2}], [4, 5, {1, 2, 3}], [5, 7, {1, 3}],
    ;;     [7, 10, {1}], [10, 40, {}], [40, 50, {4}]]

    jump = [active, bot, top] ->
        e = min (top :: (active each [_, e, _] -> e))
        attributes =
            if empty[active]:
                {}
            elif empty[active.tail]:
                active.head[2]
            else:
                (++) active each [_, _, attr] -> attr
        [e, [bot, e, attributes]]

    jumptill =
        [active, bot, top] when (bot == top) ->
            [nil, active]
        [active, bot, top] ->
            [newbot, span] = jump[active, bot, top]
            newactive = active each x ->
                [_, e, attr] = x
                if[e <= newbot, (false, continue), x]
            [spans, remainder] = jumptill[newactive, newbot, top]
            [span :: spans, remainder]

    process =
        [_, nil _, nil _] ->
            nil
        [start, active, nil _] ->
            top = max active each [_, e, _] -> e
            bot = min[start, top]
            [spans, _] = jumptill[active, start, top]
            spans
        [start, active, Pair [next, rest]] ->
            [target, end, attr] = next
            [spans, newactive] = jumptill[active, start, target]
            chain[spans, process[target, next :: newactive, rest]]

    cmp = [a, b] ->
              [s1, e1, _] = a
              [s2, e2, _] = b
              if[s1 == s2, e1 > e2, s1 < s2]
    thespans = sort[all spans each span -> span, cmp]

    process[thespans.head[0], nil, iter[thespans]]


highlight = [text, spans, offset = 0] ->
    spans := V spans each [Range [s, e], attr] -> [s, e, attr]
    #cat morsel[spans] each [start, end, attributes] ->
        xstart = max[start - offset, 0]
        xend = min[end - offset, text.length]
        attr = ({attributes.first} !! {})
        #attr[repr[attr], #text[text[xstart .. xend]]]


Highlight = [text, spans, offset = 0] ->
    x when (x == repr) ->
        #attr[#set["source"], highlight[text, spans, offset]]


highlight_lines = [text, linelocs, lrange, spans] ->
    #cat
        lrange each lineno ->
            start = if[lineno == 1, -1, linelocs[lineno - 2]]
            end = linelocs[lineno - 1]
            range = (start + 1) .. (end + 1)
            #cat[#attr[#set["lineno"], #text[String[lineno]]]
                 #attr[#set["source"]
                       highlight[text, [range, []] :: clamp[spans, range]]]]


provide:
    highlight, Highlight
    highlight_lines

