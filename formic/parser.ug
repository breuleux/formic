
require:
    common
    tokenizer
    location


iterator = [x] ->
    current = x
    [] ->
        if (current is nil):
            raise #eos[]
        else:
            rval = current.head
            current := current.tail
            rval


operator_parse = [tokenizer, order, finalize] ->

    it = iterator[tokenizer]
    between = it[]

    escape return:
        right_op = (it[] !! #eos [] -> return finalize[between])
        left_op = false
        stack = mut []
        current = false

        while true:
            ord =
                if (not left_op):
                    if (not right_op):
                        return between
                    else:
                        .right
                elif (not right_op):
                    .left
                else:
                    order[left_op, right_op]

            match ord:
                .left ->
                    current.push[between]
                    between := finalize[current]
                    [left_op, current] := stack.pop[]
                .right ->
                    stack.push[[left_op, current]]
                    left_op := right_op
                    current := mut [mut [right_op], between]
                    between := it[]
                    right_op := (it[] !! #eos [] -> false)
                .aggr ->
                    current[0].push[right_op]
                    current.push[between]
                    left_op := right_op
                    between := it[]
                    right_op := (it[] !! #eos [] -> false)
                _ ->
                    Ann [_, [location => loc1, **_]] = left_op
                    Ann [_, [location => loc2, **_]] = right_op
                    raise Error.syntax.noorder[
                        message = "The operators could not be ordered."
                        location = loc1 | loc2
                        left = left_op
                        right = right_op
                    ]


OperatorMatrix =
  #square[*groups] ->
    OperatorMatrix groups
  Vector _groups ->
    groups = _groups
    ng = groups.length
    matrix = V 0..ng each _ -> MVector 0..ng each _ -> 0
    to_index = Table enumerate[groups] each [i, g] -> (g :: i)

    order = [_groups, left, right] ->
        groups = match _groups:
                     Vector g -> g
                     #square[*g] -> g
        gids = groups each g -> to_index[g]
        if left:
            do neighbours[gids] each [a, b] ->
                matrix[a][b] := -1
        if right:
            do neighbours[gids] each [a, b] ->
                matrix[b][a] := 1

    fill_intersection = [l, r] ->
        do 0..ng each i ->
            match [self[l, i], self[i, r]]:
                [-1, -1] ->
                    matrix[l][r] := -1
                    break true
                [1, 1] ->
                    matrix[l][r] := 1
                    break true
                _ -> false

    replace = [gname, om] ->
        gid = to_index[gname]
        ng2 = om.groups.length
        newmatrix = chain enumerate[matrix] each
            [i, row] when (i == gid) ->
                0..ng2 each j ->
                    MVector chain[matrix[i][0..gid]
                                  om.matrix[j]
                                  matrix[i][(gid + 1)..ng]]
            [i, row] ->
                [MVector chain[matrix[i][0..gid]
                               0..ng2 each _ -> matrix[i][gid]
                               matrix[i][(gid + 1)..ng]]]
        matrix := V newmatrix
        groups := V chain[groups[0..gid]
                          om.groups
                          groups[(gid + 1)..ng]]
        ng := ng + ng2 - 1
        to_index := Table enumerate[groups] each [i, g] -> (g :: i)

    self =
        .matrix -> matrix
        .groups -> groups

        [i, j] -> matrix[i][j]

        .order ->
            .left -> g -> order[g, true, false]
            .right -> g -> order[g, false, true]
            g -> order[g, true, true]

        .replace -> Assoc repl ->
            do repl each Pair [a, b] -> replace[a, b]

        .assoc ->
            Symbol direction ->
                num = match direction:
                          .left -> -1
                          .right -> 1
                this =
                    #square [*g] -> this g
                    Vector groups ->
                        do groups each g ->
                            i = to_index[g]
                            matrix[i][i] := num
                this

        .infer -> [] ->
            changed = true
            while changed:
                changed := false
                do 0..ng each i ->
                    do 0..ng each j ->
                        if (matrix[i][j] == 0):
                            changes = fill_intersection[i, j]
                            changed := changed or changes

        .set_relation -> [left, right, value] ->
            matrix[to_index[left]][to_index[right]] := value

        x when (x == repr) ->
            #matrix matrix each row ->
                #row row each
                         0 -> #attr[#set["red"], #raw["&sdot;"]]
                         1 -> #attr[#set["cyan"], #raw["&uarr;"]]
                         -1 -> #attr[#set["green"], #raw["&larr;"]]
                         x -> #text["?"]

    self


parse_op_description =

    [String descr] ->
        r = Rxe.(start
                 {maybe "X"}
                 {maybe (choice " _")}
                 {(not " _Y")*}
                 {maybe (choice " _")}
                 {maybe "Y"}
                 end)

        [_, x, w1, op, w2, y] = r.match[descr]
        op := if[op == "W", "", op]

        [fixity, short] =
            if x.empty:
                [.prefix, w2.empty]
            elif y.empty:
                [.suffix, w1.empty]
            else:
                [.infix, w1.empty or w2.empty]

        if (w1 == "_" or w2 == "_"):
            [#operator[fixity, .short, op]
             #operator[fixity, .wide, op]]
        else:
            [#operator[fixity, if[short, .short, .wide], op]]

    [x] -> [x]


OperatorGroups = [**_groups] ->

    gnames = V _groups each Pair [name, _] -> name

    groups = _groups each Pair [name, descrs] ->
        V (chain descrs each descr -> parse_op_description[descr])

    fns = mut []
    to_gid = mut {=}

    do enumerate[groups] each [i, group] ->
        do group each
            #operator o ->
                to_gid[o] := i
            f ->
                fns.push[f :: i]

    .gnames -> gnames
    [o] ->
        to_gid[o] !!
            escape return:
                do fns each Pair [fn, i] ->
                    if[fn[o], return i]
                raise Error.syntax.unknown[
                    message = "Unknown operator."
                    operator = o
                ]


formic_groups = OperatorGroups[

    ;; High priority
    pfx = ["._Y", "#_Y", "@_Y"]
    sjuxt = ["XWY"]
    unq = ["^_Y", "^=_Y", "^*_Y"]
    
    ;; Arithmetic
    pow = ["X_**_Y"]
    mul = ["X_*_Y", "X_/_Y", "X_//_Y", "X_mod_Y", "+_Y", "-_Y"]
    add = ["X_+_Y", "X_-_Y"]
    cmp = ["X_<_Y", "X_=<_Y", "X_==_Y"
           "X_>_Y", "X_>=_Y", "X_/=_Y"]

    ;; Collection
    cat = ["X_++_Y"]
    pair = ["X_::_Y"]
    inter = ["X_|_Y"]
    union = ["X_&_Y"]
    diff = ["X_\\_Y"]
    range = ["X_.._Y", "X_..", ".._Y"]
    (in) = ["X_in_Y"]

    ;; Other
    wjuxt = ["X W Y"]

    ;; Logic
    and = ["X_and_Y"]
    or = ["X_or_Y"]

    ;; Low priority
    (when) = ["X_when_Y"]
    decl = ["X_->_Y", "X_=_Y", "X_:=_Y", "X_!!_Y", "X_$_Y"]
    assoc = ["X_=>_Y", "=>_Y"]
    stmt = ["X_,_Y", "X_NL_Y"]

    ;; Brackets
    open = ["(_Y", "[_Y", "{_Y"]
    close = ["X_)", "X_]", "X_}"]

    ;; Custom
    custom = [[x] -> true]

]


make_formic_op_matrix = [] ->

    unfold = #square[*xs] -> xs

    major = OperatorMatrix.[
       head, arithmetic, collection, other, logic, tail, custom
    ]
    major.order.[head, arithmetic, logic, tail]
    major.order.[head, collection, logic]
    major.order.[head, other, logic]
    major.order.[head, custom, logic]
    major.infer[]


    head = OperatorMatrix.[
        pfx, sjuxt, unq
    ]
    head.assoc.left.[sjuxt]
    head.order.[pfx, sjuxt, unq]


    arith = OperatorMatrix.[
        pow, mul, add, cmp
    ]

    arith.assoc.left.[mul, add, cmp]
    arith.assoc.right.[pow]
    arith.order.[pow, mul, add, cmp]
    arith.infer[]


    coll = OperatorMatrix.[
        cat, pair, inter, union, diff, range, in
    ]
    coll.assoc.left.[cat, inter, union, diff]
    coll.assoc.right.[pair]
    do unfold.[cat, pair, inter, union, diff, range] each
        g -> coll.order[g, .(in)]
    coll.infer[]


    logic = OperatorMatrix.[
        and, or
    ]
    logic.assoc.left.[and, or]
    logic.infer[]


    other = OperatorMatrix.[
        wjuxt
    ]
    other.assoc.left.[wjuxt]
    other.infer[]


    tail = OperatorMatrix.[
        when, decl, assoc, stmt, open, close
    ]
    tail.set_relation[.stmt, .stmt, 2]
    tail.set_relation[.open, .close, 2]
    tail.assoc.right.[decl]
    tail.order.[when, decl, assoc, stmt]
    tail.order.[stmt, open]
    tail.order.[stmt, close]
    tail.infer[]


    major.replace[
        head = head
        arithmetic = arith
        collection = coll
        logic = logic
        other = other
        tail = tail
    ]

    major


make_order = [matrix, groups] ->
    [a, b] ->
        #operator [f1, _, _] = a
        #operator [f2, _, _] = b
        match [f1, f2]:
            [_, .prefix] -> .right
            [.suffix, _] -> .left
            _ ->
                match matrix[groups[a], groups[b]]:
                    0 -> .none
                    1 -> .right
                    -1 -> .left
                    2 -> .aggr




formic_op_matrix = make_formic_op_matrix[]
formic_order = make_order[formic_op_matrix, formic_groups]

formic_finalize = [MVector [MVector[*ops], *args]] ->

    loc = (+) chain[ops, args] each
                  Ann [arg, [location => l, **_]] -> l

    match ops:

        [#operator[.infix, width, ""], *_] ->
            #send[*args] % [location = loc, width = width]

        [#operator[.infix, _, nl], *_] when (nl in {",", "NL"}) ->
            ;; We remove hole _ tokens if they are next to newlines,
            ;; so that consecutive newlines, or "," followed by a
            ;; newline, do not cause a spurious void token to be
            ;; located in-between them. Consecutive commas, on the
            ;; other hand, _do create void tokens between them, i.e.
            ;; [x,y] and [x,,y] are not the same thing.

            types = chain[[","], ops each #operator[_, _, x] -> x, [","]]
            rval = #seq
                zip[neighbours[types], args, args] each
                    [[",", ","], hole _, x] ->
                        x
                    [_, hole _, _] ->
                        false, continue
                    [_, _, arg] ->
                        arg
            rval % [location = loc]

            ;; #seq[*args] % [location = loc]

        [#operator[.prefix, _, open], #operator[.suffix, _, close]] ->
            [hole _, arg, hole _] = args
            rval = match arg:
                #seq[*args] ->
                    match (open ++ close):
                        "()" -> #begin[*args]
                        "[]" -> #ord[*args]
                        "{}" -> #unord[*args]
                arg ->
                    match (open ++ close):
                        "()" ->
                            Ann [_, [=> parnest = 0, **_]] = arg
                            arg % [parnest = parnest + 1]
                        "[]" -> #ord[arg]
                        "{}" -> #unord[arg]
            rval % [location = loc]

        [#operator[fixity, width, name]] ->
            op = name.sym %<< ops[0]
            match args:
                [hole _, hole _] -> op
                _ ->
                    #send[op, #seq(args) % [location = loc]] % [
                        location = loc, width = width, operator = true
                ]
            ;; #op[name.sym, *args] % [location = loc, width = width]

        x ->
            <> #unknown[x]


parse = [txt, url = false] ->
    src = Source[txt, url]
    tokens = tokenize[src]
    rval = operator_parse[iter[tokens], formic_order, formic_finalize]
    match rval:
        #seq[*things] -> (#begin[*things] %<< rval)
        x -> x


ast_reprhook = [obj, repr] ->
    hook = ast_reprhook
    match obj:
        Ann [#send[op, #seq[lhs, rhs]], [=> operator, **_]] when operator ->
            #binop[hook[lhs, repr], hook[op, repr], hook[rhs, repr]]
        #send[lhs, rhs] ->
            #attr[#set["send"], #binop[hook[lhs, repr], #void[], hook[rhs, repr]]]
        #seq[*things] ->
            #attr[#set["seq"], #group(things each thing -> hook[thing, repr])]
        #ord[*things] ->
            #attr[#set["ord"], #group(things each thing -> hook[thing, repr])]
        #unord[*things] ->
            #attr[#set["unord"], #group(things each thing -> hook[thing, repr])]
        #begin[*things] ->
            #attr[#set["begin"], #group(things each thing -> hook[thing, repr])]
        hole _ ->
            repr[[]]
        #value[x] ->
            #attr[#set["value"], repr[x]]
        x -> repr[x]



provide:
    parse
    ast_reprhook

